[{"/Users/ericschwartz/dev/projects/stonks-ui/src/App.js":"1","/Users/ericschwartz/dev/projects/stonks-ui/src/reportWebVitals.js":"2","/Users/ericschwartz/dev/projects/stonks-ui/src/Stonks.js":"3","/Users/ericschwartz/dev/projects/stonks-ui/src/index.js":"4"},{"size":248,"mtime":1612041359984,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1612032781615,"results":"7","hashOfConfig":"6"},{"size":8469,"mtime":1650303038420,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1612032781615,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"n4job1",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/ericschwartz/dev/projects/stonks-ui/src/App.js",["21"],"import logo from './logo.svg';\nimport './App.css';\nimport Stonks from './Stonks';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Stonks/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/ericschwartz/dev/projects/stonks-ui/src/reportWebVitals.js",[],"/Users/ericschwartz/dev/projects/stonks-ui/src/Stonks.js",["22","23"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport './Stonks.scss'\nimport { findRenderedComponentWithType } from 'react-dom/test-utils';\n\nconst BASE_URL = \"http://localhost:4567/\";\nconst REDDIT_URL = \"https://www.reddit.com/\"\n\nlet INCREMENTS = {\n    m: \"minute\",\n    h: \"hour\",\n    d: \"day\",\n    w: \"week\"\n}\n\nclass Stonks extends Component {\n    state = {\n        loading: false,\n        postData: [],\n        amount: 2,\n        amountCounter: 0,\n        keyword: \"\",\n        timeIncrement: \"d\",\n        comments: false,\n        postType: \"P\",\n        chartTitle: \"\",\n        seriesName: \"\",\n        redditData: [],\n        afterID: \"\"\n    }\n\n    fetchPushshiftData () {\n        let i = this.state.amountCounter;\n        let timeIncrement = this.state.timeIncrement;\n        let postType = this.state.postType;\n        let keyword = this.state.keyword;\n        let url = `${BASE_URL}pushshift/${keyword}?posttype=${postType}&after=${i}&before=${i - 1}&timeincrement=${timeIncrement}`;\n\n        if (i > 0) {\n            axios.get(url).then(response => {\n                console.log(response.data);\n                if (response.data[1] !== null) {\n                    let postData = this.state.postData;\n                    postData.push(response.data);\n                    this.setState({\n                        postData: postData,\n                        amountCounter: --i,\n                        loading: i > 0\n                    });\n                }\n                window.setTimeout(this.fetchPushshiftData.bind(this), 300);\n            });\n        }\n    }\n\n    setChartTitle () {\n        let chartTitle = \"\";\n        let postType = this.state.postType === \"C\" ? \"Comments\" : \"Posts\";\n        let increment = INCREMENTS[this.state.timeIncrement];\n        if (postType && increment) {\n            chartTitle = `${postType} per ${increment}`;\n        }\n        return chartTitle;\n    }\n\n    getChartOptions () {\n        return {\n            title: {\n                text: this.state.chartTitle,\n                style: {color: \"white\"}\n            },\n            colors: [\"lightgreen\"],\n            chart: {\n                // height: 200,\n                // width: \"100%\",\n                type: \"line\",\n                backgroundColor: \"#282c34\"\n            },\n            xAxis: {\n                categories: this.state.postData ? this.state.postData.map(dataSet => dataSet[0]) : [],\n                labels: {\n                    style: {color: \"white\"}\n                }\n            },\n            yAxis: {\n                title: {\n                    text: null\n                },\n                labels: {\n                    style: {color: \"white\"}\n                }\n            },\n            series: [{\n                name: this.state.seriesName,\n                data: this.state.postData ? this.state.postData.map((dataSet, i) => {\n                    return {\n                        y: dataSet[1],\n                        key: i\n                    }\n                }) : []\n            }],\n            legend: {\n                itemStyle: {\n                    color: \"white\"\n                }\n            }\n        };\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n    \n        this.setState({\n          [name]: value\n        });\n    }\n\n    handleRun (event) {\n        event.preventDefault()\n        this.setState({\n            postData: [],\n            amountCounter: this.state.amount,\n            loading: true,\n            chartTitle: this.setChartTitle(),\n            seriesName: this.state.keyword\n        }, this.fetchPushshiftData.bind(this));\n    }\n\n    handleRedditClick (event, afterID) {\n        if (this.state.token) { \n            this.fetchRedditApi(null, afterID);\n        } else {\n            this.getTokenThenFetch(afterID);\n        }\n    }\n\n    getTokenThenFetch (afterID) {\n        axios.get(`${BASE_URL}access_token`).then(response => {\n            console.log(response)\n            this.setState({\n                token: response.data\n            }, () => {\n                this.fetchRedditApi(null, afterID);\n            });\n        });\n    }\n\n    fetchRedditApi (event, afterID) {\n        let url = `${BASE_URL}reddit/${this.state.keyword}`\n\n        let params = {} \n        if (afterID) {\n            params.after = afterID;\n        }\n        if (this.state.token) {\n            params.token = this.state.token;\n        }\n\n        axios.get(url, {params: params}).then(response => {\n            console.log(response);\n            this.setState({\n                redditData: response.data.children,\n                afterID: response.data.after\n            });\n        });\n    }\n\n    nextPage () {\n        this.handleRedditClick(null, this.state.afterID);\n    }\n\n    render () {\n        let getChart = () => {\n            let chart = \n                    <HighchartsReact\n                        highcharts={Highcharts}\n                        options={this.getChartOptions()}\n                        // immutable={true}\n                    />;\n            return chart;\n        }\n\n        let buttonClass = this.state.loading ? \"loading\" : \"inactive\";\n\n        return (\n            <div className=\"Stonks\">\n                <h3>Reddit Hype</h3>\n                <form onSubmit={this.handleRun.bind(this)}>\n                    <div className=\"radio\">\n                        <label>\n                            Posts\n                            <input\n                                type=\"radio\"\n                                name=\"postType\"\n                                value=\"P\"\n                                checked={this.state.postType === \"P\"}\n                                onChange={this.handleInputChange.bind(this)}\n                            />\n                        </label>\n                        <label>\n                            Comments\n                            <input\n                                type=\"radio\"\n                                name=\"postType\"\n                                value=\"C\"\n                                checked={this.state.postType === \"C\"}\n                                onChange={this.handleInputChange.bind(this)}\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <input \n                            type=\"text\" \n                            name=\"keyword\" \n                            value={this.state.keyword} \n                            onChange={this.handleInputChange.bind(this)}/>\n                    </div>\n                    <div>\n                        <input\n                            type=\"number\"\n                            name=\"amount\"\n                            value={this.state.amount}\n                            onChange={this.handleInputChange.bind(this)}/>\n                        <select\n                            name=\"timeIncrement\" \n                            value={this.state.timeIncrement} \n                            onChange={this.handleInputChange.bind(this)}>\n                            <option value=\"m\">Minutes</option>\n                            <option value=\"h\">Hours</option>\n                            <option value=\"d\">Days</option>\n                            <option value=\"w\">Weeks</option>\n                        </select>\n                    </div>\n                    <input type=\"submit\" value=\"Run\" className={buttonClass} />\n                </form>\n\n                <div className=\"chart\">\n                    {this.state.chartTitle ? getChart() : \"\"}\n                </div>\n\n                <button onClick={this.handleRedditClick.bind(this)}>Fetch from Reddit API</button>\n                <div className=\"reddit-links\">\n                    {this.state.redditData ? this.state.redditData.map((post, i) => {\n                        return (<div className=\"reddit-link\" key={i}>\n                            <a href={REDDIT_URL + post.data.permalink} target=\"_blank\">{post.data.title}</a>\n                        </div>);\n                    }) : \"\"}\n                    {this.state.afterID ? <button onClick={this.nextPage.bind(this)}>Next Page</button> : \"\"}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Stonks;","/Users/ericschwartz/dev/projects/stonks-ui/src/index.js",[],["24","25"],{"ruleId":"26","severity":1,"message":"27","line":1,"column":8,"nodeType":"28","messageId":"29","endLine":1,"endColumn":12},{"ruleId":"26","severity":1,"message":"30","line":6,"column":10,"nodeType":"28","messageId":"29","endLine":6,"endColumn":39},{"ruleId":"31","severity":1,"message":"32","line":249,"column":72,"nodeType":"33","endLine":249,"endColumn":87},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'findRenderedComponentWithType' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-global-assign","no-unsafe-negation"]